{
	"info": {
		"_postman_id": "1947460a-a585-45dc-b212-b80254f0a26c",
		"name": "Feature Subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28232892"
	},
	"item": [
		{
			"name": "Добавление новой подписки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "subscriptionId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подписки (пользователь не сущ.)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователя не существует\", function () {\r",
							"    pm.expect(target.message).equal('Пользователя 1000 не существует');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1000"
						},
						{
							"key": "subscriptionId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подписки (польз. уже подписан)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь уже подписан\", function () {\r",
							"    pm.expect(target.message).equal('Пользователь 1 уже подписан на пользователя 2');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "subscriptionId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление подписки (подписка не сущ.)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователя не существует\", function () {\r",
							"    pm.expect(target.message).equal('Пользователя 1000 не существует');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1000"
						},
						{
							"key": "subscriptionId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление подписки (подписка не сущ.)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Подписки не существует\", function () {\r",
							"    pm.expect(target.message).equal('Не найдено подписки 4 у пользователя 1');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "subscriptionId",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск подписок",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователи должны содержать поля: id, name\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Должен быть найден только один пользователь\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "-10833646",
							"description": "id пользователей",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск подписок (у пользователя нет подписок)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должен вернуться пустой список\", function () {\r",
							"    pm.expect(target.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "-10833646",
							"description": "id пользователей",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск подписок (пользователь не сущ.)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователя не существует\", function () {\r",
							"    pm.expect(target.message).equal('Пользователя 1000 не существует');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "-10833646",
							"description": "id пользователей",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск событий",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"События должны содержать поля: id, annotation, category, confirmedRequests, eventDate, initiator, paid, title, views\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('annotation');\r",
							"    pm.expect(target[0]).to.have.property('category');\r",
							"    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
							"    pm.expect(target[0]).to.have.property('eventDate');\r",
							"    pm.expect(target[0]).to.have.property('initiator');\r",
							"    pm.expect(target[0]).to.have.property('paid');\r",
							"    pm.expect(target[0]).to.have.property('title');\r",
							"    pm.expect(target[0]).to.have.property('views');\r",
							"});\r",
							"\r",
							"pm.test(\"Должен быть найден только одно событие\", function () {\r",
							"    pm.expect(target.length).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId",
						"events"
					],
					"query": [
						{
							"key": "ids",
							"value": "-10833646",
							"description": "id пользователей",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "subscriptionId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление подписки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/:subscriptionId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriptionId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "subscriptionId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск подписок (после удаления)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Должен вернуться пустой список\", function () {\r",
							"    pm.expect(target.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscriptions/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscriptions",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "-10833646",
							"description": "id пользователей",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
							"disabled": true
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}